class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        """
        The solution here is to iterate through each letter in the string and increase the
        index until a repeated letter is detected. Each new letter should be checked against a
        set (lookup time O(1)) and if not in set, added to set. Kepp track of the longest
        string length and the longest string until the end
        """
        string_len = len(s)
        longest_len = 0
        i = 0
        j = 0
        temp_set = set()
        stop_i = len(s) - 1
        while i <= stop_i - longest_len:
            if j > (string_len - 1) or s[j] in temp_set:
                len_string = j - i
                if len_string > longest_len:
                    longest_len = len_string

                i += 1
                j = i
                temp_set = set()
            else:
                temp_set.add(s[j])
                j += 1
        return longest_len
