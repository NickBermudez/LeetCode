# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def linker(self, node_list):
        """
        helper function that links nodes together in a list
        """
        len_list = len(node_list)
        if len_list ==1:
            return node_list
        for i in range(len_list -1 ):
            node_list[i].next = node_list[i+1]
        return node_list

    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        """
        The linked lists are stored in such a way that adding them is possible using the 
        addition algorithm everyone learned in 2nd grade (add numbers in a column, carry
        over the 1 if 10 or greater). The trick is to handle cases where the length of one
        list is greater than the other. 
        """
        solution = []
        carry_over = False
        temp1 = l1
        temp2 = l2
        temp1_none = False
        temp2_none = False
        while True:

            if (temp1 is None) and (temp2 is None):
                if carry_over:
                    solution.append(ListNode(val=1))
                break
            if temp1 is None:
                temp1 = ListNode(val=0)
            if temp2 is None:
                temp2 = ListNode(val=0)

            temp_val = temp1.val + temp2.val

            if carry_over:
                temp_val += 1

            carry_over = False

            if temp_val >= 10:
                carry_over = True
                temp_val = temp_val % 10

            new_node = ListNode(val = temp_val)
            solution.append(new_node)
            
            temp1 = temp1.next
            temp2 = temp2.next
        solution = self.linker(solution)
        return solution[0]
        
